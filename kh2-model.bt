// Used by kh2-bar.bt

enum <ubyte> VIFCODE {
    nop = 0,
    stcycl = 1,
    offset = 2,
    base = 3,
    itop = 4,
    stmod = 5,
    mskpath3 = 6,
    mark = 7,
    flushe = 16,
    flush = 17,
    flusha = 19,
    mscal = 20,
    mscnt = 23,
    mscalf = 21,
    stmask = 32,
    strow = 48,
    stcol = 49,
    mpg = 74,
    direct = 80,
    directhl = 81,
    unmasked_s_32 = 96,
    unmasked_s_16 = 97,
    unmasked_s_8 = 98,
    unmasked_v2_32a = 100,
    unmasked_v2_16a = 101,
    unmasked_v2_8a = 102,
    unmasked_v2_32b = 104,
    unmasked_v3_16b = 105,
    unmasked_v3_8b = 106,
    unmasked_v4_32c = 108,
    unmasked_v4_16c = 109,
    unmasked_v4_8c = 110,
    unmasked_v4_5 = 111,
    masked_s_32a = 112,
    masked_s_16a = 113,
    masked_s_8a = 114,
    masked_v2_32b = 116,
    masked_v2_16b = 117,
    masked_v2_8b = 118,
    masked_v2_32c = 120,
    masked_v3_16c = 121,
    masked_v3_8c = 122,
    masked_v4_32 = 124,
    masked_v4_16 = 125,
    masked_v4_8 = 126,
    masked_v4_5 = 127,
};

typedef struct {
    ushort imm;
    byte num;
    byte cmd;
} VIFnop;

typedef struct {
    ushort imm;
    byte num;
    byte cmd;
} VIFflushe;

typedef struct {
    byte cl;
    byte imm_wl;
    byte num;
    byte cmd;
} VIFstcycl;

typedef struct VIFunpack6c { // V4-32
    ushort addr:10;
    ushort skip:4;
    ushort usn:1;
    ushort flg:1;
    byte num_size;
    byte cmd;

    SetBackColor(cLtYellow);
    FVECTOR4 data[num_size];
};

typedef struct VIFunpack65 { // V2-16
    ushort addr:10;
    ushort skip:4;
    ushort usn:1;
    ushort flg:1;
    byte num_size;
    byte cmd;

    SetBackColor(cLtYellow);
    VECTOR_U16x2 data[num_size];
};

typedef struct (int size) {
    local int64 endPos = FTell() + size;
    local uchar cmd;
    while (FTell() < endPos) {
        cmd = ReadUByte(FTell() +3) & 0x7F;

        SetBackColor(cLtBlue);
        switch (cmd) {
            case 0: VIFnop vifcmd; break;
            case 1: VIFstcycl vifcmd; break;
            case 0x6c: VIFunpack6c vifcmd; break;
            case 0x65: VIFunpack65 vifcmd; break;
            case 0x20: VIFflushe vifcmd; break;
            default: return;
        }
    }
} VIFPacket;

struct vifCode {
    ushort imm;
    ubyte num;
    VIFCODE cmd;
};

enum <uint> DMATAGID {
    refe = 0,
    cnt = 1,
    next = 2,
    ref = 3,
    refs = 4,
    call = 5,
    ret = 6,
    end = 7,
};

struct sourceChainDmaTag {
    uint qwc : 16;
    uint pad : 10;
    uint pce : 2;
    DMATAGID id : 3;
    uint irq : 1;

    uint addr;

    vifCode vif[2];

    if (id == 0 || id == 1 || id == 2 || id == 5) {
        if (qwc >= 1) {
            ubyte raw[16 * qwc];
        }
    }
};

struct dmaChainMap (int64 top) {
    uint firstDmaTagOffset;
    uint textureIndex;
    ushort unk;
    ushort transparentFlag;
    
    ubyte unk1 : 1;
    ubyte enableUvsc : 1;
    ubyte uvscIdx : 4;
    ubyte unk2 : 2;
    ubyte vd;
    ubyte ve;
    ubyte vf;

    local int64 cursor = FTell();
    FSeek(top + firstDmaTagOffset);
    SetBackColor(cLtRed);
    sourceChainDmaTag dmaTag;
    SetBackColor(cLtBlue);
    FSeek(cursor);
};

struct vifPacketRenderingGroup (int64 top) {
    uint offsetToGroup;

    local int64 cursor = FTell();
    FSeek(top + offsetToGroup);
    ushort first;
    FSeek(cursor);
};

struct mapHeader (int64 top) {
    SetBackColor(cLtGreen);
    ushort modelCount;
    ushort shadowCount;
    ushort textureCount;
    ushort octalTreeCount;
    uint offVifPacketRenderingGroup;
    uint offDmaChainIndexRemapTable;
    SetBackColor(cLtBlue);
    dmaChainMap dmaChainMaps(top)[modelCount] <optimize=false>;

    local int64 cursor = FTell();
    FSeek(top + offVifPacketRenderingGroup);
    SetBackColor(cLtYellow);
    vifPacketRenderingGroup vif_packet_rendering_group(top)[octalTreeCount] <optimize=false>;
    FSeek(top + offDmaChainIndexRemapTable);
    SetBackColor(cLtBlue);
    uint next_offset;
    ushort dmaChainIndexRemapTable[modelCount];
    FSeek(cursor);

    SetBackColor(cNone);
};

void ReadMapModel() {
    local int64 top = FTell() -16;
    SetBackColor(cLtGreen);
    mapHeader mapHdr(top);
    SetBackColor(cNone);
}

struct PARTNAME {
	int32 PART_LF_HEAD;
	int32 PART_RF_HEAD;
	int32 PART_LB_HEAD;
	int32 PART_RB_HEAD;
	int32 PART_LF_NECK;
	int32 PART_RF_NECK;
	int32 PART_LB_NECK;
	int32 PART_RB_NECK;
	int32 PART_LF_CHEST;
	int32 PART_RF_CHEST;
	int32 PART_LB_CHEST;
	int32 PART_RB_CHEST;
	int32 PART_LF_HIP;
	int32 PART_RF_HIP;
	int32 PART_LB_HIP;
	int32 PART_RB_HIP;
	int32 PART_LF_COLLAR;
	int32 PART_RF_COLLAR;
	int32 PART_LB_COLLAR;
	int32 PART_RB_COLLAR;
	int32 PART_LF_UPARM;
	int32 PART_RF_UPARM;
	int32 PART_LB_UPARM;
	int32 PART_RB_UPARM;
	int32 PART_LF_FOARM;
	int32 PART_RF_FOARM;
	int32 PART_LB_FOARM;
	int32 PART_RB_FOARM;
	int32 PART_LF_HAND;
	int32 PART_RF_HAND;
	int32 PART_LB_HAND;
	int32 PART_RB_HAND;
	int32 PART_LF_FEMUR;
	int32 PART_RF_FEMUR;
	int32 PART_LB_FEMUR;
	int32 PART_RB_FEMUR;
	int32 PART_LF_TIBIA;
	int32 PART_RF_TIBIA;
	int32 PART_LB_TIBIA;
	int32 PART_RB_TIBIA;
	int32 PART_LF_FOOT;
	int32 PART_RF_FOOT;
	int32 PART_LB_FOOT;
	int32 PART_RB_FOOT;
	int32 PART_LF_TOES;
	int32 PART_RF_TOES;
	int32 PART_LB_TOES;
	int32 PART_RB_TOES;
	int32 PART_WEAPON_L_LINK;
	int32 PART_WEAPON_L;
	int32 PART_WEAPON_R_LINK;
	int32 PART_WEAPON_R;
	int32 PART_SPECIAL0;
	int32 PART_SPECIAL1;
	int32 PART_SPECIAL2;
	int32 PART_SPECIAL3;
};

struct ModelSKLRAWBone {
    SetBackColor(cLtYellow);
    FVECTOR4 bbox_min;
    FVECTOR4 bbox_max;
    FVECTOR4 ik_bone_bias;
    PARTNAME partName;
    FVECTOR4 distanceFromSkeleton;
};

struct Flag {
    uint32 no_envelope:1;
    uint32 not_joint:1;
    uint32 reserved:30;
};

struct ModelHRC {
    SetBackColor(cLtBlue);
    int16 id;
    int16 sibling_id;
    int16 parent_id;
    int16 child_id;
    int32 reserved;
    struct Flag flag;
    FVECTOR4 scale;
    FVECTOR4 rot;
    FVECTOR4 trans;
};

struct objectMatrixRef {
    SetBackColor(cLtGreen);
    uint count;
    SetBackColor(cLtBlue);
    int indices[count];
};

struct ModelSKLRAWAttribute {
    uint32 drawAlphaPhase:1;
    uint32 alpha:1;
    uint32 multi:1;
    uint32 reserved1:3;
    uint32 part:5;
    uint32 mesh:5;
    uint32 priority:5;
    uint32 alphaEx:1;
    uint32 uvscroll:5;
    uint32 alphaAdd:1;
    uint32 alphaSub:1;
    uint32 specular:1;
    uint32 noLight:1;
    uint32 reserved2:1;
};

struct objectModelPart (int64 top) {
    ModelSKLRAWAttribute attribute;
    uint texture_index;
    uint polygon_num;
    uint16 hasVB;
    uint16 alt;
    uint offFirstDmaTag;
    uint offMatrixRef;
    uint totalQwc;
    uint unk5;

    SetBackColor(cLtBlue);
    local int64 cursor = FTell();
    FSeek(top + offMatrixRef);
    objectMatrixRef matrixRef;

    FSeek(top + offFirstDmaTag);
    sourceChainDmaTag dmaTag[totalQwc] <optimize=false>;

    local int x;
    for (x=0; x<totalQwc; x++) {
        if (dmaTag[x].qwc != 4 && dmaTag[x].id == 3) {
            FSeek(top + dmaTag[x].addr);
            VIFPacket vif(16 * dmaTag[x].qwc);
        }
    }

    FSeek(cursor);
};

struct objectModelHeader (int64 top) {
    ushort numMatrices;
    ushort texture_num;
    uint matricesOffset;
    uint bone_offset;
    uint numModelParts;
    objectModelPart modelParts(top)[numModelParts] <optimize=false>;

    FSeek(top + bone_offset);
    ModelSKLRAWBone bone;

    if (matricesOffset != 0) {
        FSeek(top + matricesOffset);
        SetBackColor(cLtBlue);
        ModelHRC objMatrixList[numMatrices] <optimize=false>;
        SetBackColor(cNone);
    }
};

void ReadObjectModel() {
    local int64 top = FTell() -16;
    SetBackColor(cLtGreen);
    objectModelHeader objHdr(top);
    SetBackColor(cNone);
}

typedef enum <uint> {
    MULTI=-1,
    BG=2, //MAP = 2,
    SKL=3, //OBJECT = 3,
    SHADOW = 4,
} MODEL_TYPE;

typedef enum <uint> {
    CHARAOBJ=0,
    MAPBG=0,
    BGOBJ=1,
    SKYBG=1,
} MODEL_SUBTYPE;

struct ModelHeader {
    MODEL_TYPE type;
    MODEL_SUBTYPE subtype;
    int32 attribute;
    uint32 size;
};

void ReadModel() {
    FSkip(0x90);
    SetBackColor(cLtGreen);
    ModelHeader modelHdr;
    SetBackColor(cNone);
    switch (modelHdr.type) {
        case 2: ReadMapModel(); break;
        case 3: ReadObjectModel(); break;
    }
}
