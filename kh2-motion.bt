// Use kh2-bar.bt

typedef struct FVECTOR4 {
    float x;
    float y;
    float z;
    float w;
};

typedef struct FMATRIX44 {
    FVECTOR4 v0;
    FVECTOR4 v1;
    FVECTOR4 v2;
    FVECTOR4 v3;
};

typedef enum <uint16> TrackNo {
    UNKNOWN=-1,
    SCX=0,
    SCY=1,
    SCZ=2,
    RTX=3,
    RTY=4,
    RTZ=5,
    ETX=6,
    ETY=7,
    ETZ=8,
} TrackNo;

typedef struct InitialPose {
    SetBackColor(cLtYellow);
    ushort boneIndex;
    TrackNo track; //channel
    float value;
};

string commentInitialPose(InitialPose &r) {
    string s = "";
    SPrintf(s, "%u, %u, %f", r.boneIndex, r.track, r.value);
    return s;
}

typedef struct FCurve {
    ushort boneIndex;
    TrackNo track:4;
    ubyte pre:2;
    ubyte post:2;
    ubyte keyCount;
    ushort keyBase; //t9Idx
};

string commentFCurve(FCurve &r) {
    string s = "";
    SPrintf(s, "%u, %u, %u, %u, %u, %u"
        , r.boneIndex
        , r.track
        , r.pre
        , r.post
        , r.keyCount
        , r.keyBase
    );
    return s;
}

typedef enum <ubyte> CNS_TYPE {
    CNS_POS=0,
    CNS_PATH=1,
    CNS_ORI=2,
    CNS_DIR=3,
    CNS_UPVCT=4,
    CNS_2PNTS=5,
    CNS_SCL=6,
    CNS_CAM=7,
    CNS_CAM_PATH=8,
    CNS_INT_PATH=9,
    CNS_INT=10,
    CNS_CAM_UPVCT=11,
    CNS_POS_LIM=12,
    CNS_ROT_LIM=13,
} CNS_TYPE;

typedef struct Constraint {
    SetBackColor(cLtYellow);
    CNS_TYPE type;
    ubyte temporary_active_flag;
    ushort passive_id;
    ushort active_id[2];
    uint16 activation_num;
    uint16 activation_base;
};

typedef struct Active {
    SetBackColor(cLtRed);
    float time;
    uint32 active;
};

struct JointIndex {
    SetBackColor(cLtRed);
    ushort joint;
    uint32 ik:2;
    uint32 trans:1;
    uint32 rotation:1;
    uint32 fixed:1;
    uint32 calculated:1;
    uint32 calcMatrix2Rot:1;
    uint32 extEffector:1;
    uint32 reserved:8;
};

struct AxBone {
    int index;
    int parent;
    int32 reserved;
    int32 flag;
    FVECTOR4 scale;
    FVECTOR4 rot;
    FVECTOR4 trans;
};

string commentAxBone(AxBone &r) {
    string s = "";
    SPrintf(s, "%d, %d"
        , r.index
        , r.parent
    );
    return s;
}

typedef enum <uint16> TYPE {
    TYPE_CONSTANT=0,
    TYPE_LINEAR=1,
    TYPE_HERMITE=2,
} TYPE;

struct FCurveKey {
    SetBackColor(cLtGreen);
    TYPE type:2;
    uint16 time:14; //ushort t11Idx:14;
    uint16 value; //ushort t10Idx;
    uint16 left; //ushort t12IdxA;
    uint16 right; //ushort t12IdxB;
};

string commentFCurveKey(FCurveKey &r) {
    string s = "";
    SPrintf(s, "%u, %u, %u, %u, %u"
        , r.type
        , r.time
        , r.value
        , r.left
        , r.right
    );
    return s;
}

typedef enum EXPR_TYPE {
    EXPR_UNKNOWN=-1,
    FUNC_SIN=0,
    FUNC_COS=1,
    FUNC_TAN=2,
    FUNC_ASIN=3,
    FUNC_ACOS=4,
    FUNC_ATAN=5,
    FUNC_LOG=6,
    FUNC_EXP=7,
    FUNC_ABS=8,
    FUNC_POW=9,
    FUNC_SQRT=10,
    FUNC_MIN=11,
    FUNC_MAX=12,
    FUNC_AV=13,
    FUNC_COND=14,
    FUNC_AT_FRAME=15,
    FUNC_CTR_DIST=16,
    FUNC_FMOD=17,
    OP_PLUS=18,
    OP_MINUS=19,
    OP_MUL=20,
    OP_DIV=21,
    OP_MOD=22,
    OP_EQ=23,
    OP_GT=24,
    OP_GE=25,
    OP_LT=26,
    OP_LE=27,
    OP_AND=28,
    OP_OR=29,
    VARIABLE_FC=30,
    CONSTANT_NUM=31,
    FCURVE_ETRNX=32,
    FCURVE_ETRNY=33,
    FCURVE_ETRNZ=34,
    FCURVE_ROTX=35,
    FCURVE_ROTY=36,
    FCURVE_ROTZ=37,
    FCURVE_SCALX=38,
    FCURVE_SCALY=39,
    FCURVE_SCALZ=40,
    LIST=41,
    ELEMENT_NAME=42,
    FUNC_AT_FRAME_ROT=43,
} EXPR_TYPE;

struct ExpressionNode {
    EXPR_TYPE type:8;
    uint32 isGlobal:1;
    uint32 reserved:7;
    uint32 element:16;
    float value;
    uint16 car;
    uint16 cdr;
};

struct Expression {
    SetBackColor(cLtPurple);
    short boneIdx;
    TrackNo track;
    short reserved;
    short node; //t6Idx
};

typedef enum LIM_TYPE {
    LIM_ROT=0,
    LIM_SPHERE=1,
    LIM_BOX=2,
} LIM_TYPE;

struct ConstraintLimiter {
    SetBackColor(cLtGreen);
    LIM_TYPE type:3;
    uint32 global:1;
    uint32 xmin:1;
    uint32 xmax:1;
    uint32 ymin:1;
    uint32 ymax:1;
    uint32 zmin:1;
    uint32 zmax:1;
    uint32 reserved:22;
    int32 padding;
    float dampingWidth;
    float dampingStrength;
    FVECTOR4 min;
    FVECTOR4 max;
};

typedef enum MOTION_TYPE {
    PROTOTYPE_0=0,
    RAW=1,
} MOTION_TYPE;

typedef enum MOTION_SUBTYPE {
    NORMAL=0,
    IGNORE_SCALE=1,
} MOTION_SUBTYPE;

typedef struct PositionInfo {
    SetBackColor(cLtGreen);
    float scale[3];
    int not_unit;
    struct FVECTOR4 rot;
    struct FVECTOR4 trans;
    int fcurve_index[9];
    int reserved[3];
};

struct MotionHeader (int64 top) {
    SetBackColor(cLtGreen);
    MOTION_TYPE type;
    MOTION_SUBTYPE subType;
    uint extraOffset;
    uint extraSize;

    SetBackColor(cNone);

    // 0: compressed format
    if (type == 0) {
        SetBackColor(cLtGreen);
        ushort numFKBones;
        ushort numFKIKBones;
        uint TotalFrameCount;
        uint ikBoneOffset <format=hex>;
        uint jointIndexOffset <format=hex>;
    
        uint keyTimeCount;
        uint initialPoseOffset <format=hex>;
        uint initialPoseCount;
        uint positionInfoOffset <format=hex>;
    
        uint fcurveForwardOffset <format=hex>;
        uint fcurveForwardCount;
        uint fcurveInverseOffset <format=hex>;
        uint fcurveInverseCount;
    
        uint fcurveKeyOffset <format=hex>;
        uint keyTimeOffset <format=hex>;
        uint keyValueOffset <format=hex>;
        uint keyTangentOffset <format=hex>;
    
        uint constraintOffset <format=hex>;
        uint constraintCount;
        uint activeOffset <format=hex>;
        uint constraintLimiterOffset <format=hex>;
    
        uint expressionOffset <format=hex>;
        uint expressionCount;
        uint expressionOffset <format=hex>;
        uint expressionCount;

        float min[4];
        float max[4];
        float FrameLoop;
        float FrameEnd;
        float FramePerSecond;
        float FrameCount;
        uint32 extEffector_offset;
        uint32 reserved[3];

        SetBackColor(cNone);

        FSeek(top +initialPoseOffset);
        InitialPose initialPose[initialPoseCount] <comment=commentInitialPose>;
    
        FSeek(top +fcurveForwardOffset);
        SetBackColor(cLtGreen);
        FCurve fcurveForward[fcurveForwardCount] <comment=commentFCurve>;
    
        FSeek(top +fcurveInverseOffset);
        SetBackColor(cLtRed);
        FCurve fcurveInverse[fcurveInverseCount] <comment=commentFCurve>;

        SetBackColor(cNone);

        local int fcurveKeyCount = ((keyTimeOffset - fcurveKeyOffset)/8);
        FSeek(top +fcurveKeyOffset);
        FCurveKey fcurveKey[fcurveKeyCount] <comment=commentFCurveKey,optimize=false>;

        FSeek(top +keyTimeOffset);
        SetBackColor(cLtBlue);
        float keyTime[keyTimeCount];

        local int keyValueCount = (keyTangentOffset - keyValueOffset) / 4;
        FSeek(top +keyValueOffset);
        SetBackColor(cLtYellow);
        float keyValue[keyValueCount];

        local int keyTangentCount = (constraintOffset - keyTangentOffset) / 4;
        FSeek(top +keyTangentOffset);
        SetBackColor(cLtRed);
        float keyTangent[keyTangentCount];

        SetBackColor(cNone);

        FSeek(top +constraintOffset);
        Constraint constraint[constraintCount];

        local int activeCount = (constraintLimiterOffset - activeOffset) / 8;
        FSeek(top +activeOffset);
        Active active[activeCount];

        FSeek(top +constraintLimiterOffset);
        ConstraintLimiter constraintLimiter[(expressionOffset-constraintLimiterOffset)/48] <optimize=false>;

        FSeek(top +expressionOffset);
        Expression expression[expressionCount] <optimize=false>;

        FSeek(top +expressionOffset);
        ExpressionNode expressionNode[expressionCount] <optimize=false>;

        FSeek(top +ikBoneOffset);
        AxBone ikBone[numFKIKBones-numFKBones]  <comment=commentAxBone>;

        FSeek(top +jointIndexOffset);
        JointIndex jointIndex[numFKIKBones];

        FSeek(top +positionInfoOffset);
        PositionInfo positionInfo;
    }
    // 1: uncompressed form
    if (type == 1) {
        SetBackColor(cLtGreen);
        // format imported from OpenKh:
        // - https://github.com/Xeeynamo/OpenKh/pull/293/files
        uint BoneCount;
        uint Unk14;
        uint Unk18;
        uint Unk1c;

        uint frame_num;
        uint TotalFrameCount;
        uint matrix_offset;
        uint position_info_offset;

        FVECTOR4 min;
        FVECTOR4 max;
        float startFrame;
        float endFrame;
        float fps;
        float retFrame;

        SetBackColor(cNone);

        FMATRIX44 rawframe[BoneCount*TotalFrameCount];
    }

};

void ReadMotionHeader() {
    FSkip(0x90);
    local int64 top = FTell();
    MotionHeader motion(top);
}

typedef enum <ubyte> {
    JumpState = 0,
    PlayPAXeffectfromafm = 1,
    Playfootstepsound = 2,
    DuskJumpStateanimationinslot628 = 3,
    Textureanimationstart = 4,
    TextureanimationstopUNUSED = 5,
    UseItemeffect = 6,
    unknownLIMITAnmatrCallbackLimitRC = 7,
    PlaySEsoundfromafm = 8,
    unknownVariousTrigger1 = 9,
    unknownVariousTrigger2 = 10,
    unknownVariousTrigger4 = 11,
    unknownVariousTrigger8 = 12,
    Playsanenemyvsbvoice = 13,
    Playsanallyvsbvoice = 14,
    TurntoTarget = 15,
    unknownDisableCommandTimeEgWhenhitonair = 16,
    Magiccast = 17,
    UNDEFINED = 18,
    ApplyfootstepeffectFootprintwatersplashes = 19,
    UNDEFINED20 = 20,
    Turntolockon21 = 21,
    Makesthekeybladeappear = 22,
    FadestartOpacitydecrease = 23,
    FadestartOpacityincrease = 24,
    unknownRelatedtotheparty = 25,
    Setmeshcolor = 26,
    Resetmeshcolor = 27,
    Revengecheck = 28,
    PlaysaKeybladeappearancesprite = 29,
    unknownLIMITPlayVoiceUNUSED = 30,
    Triggervibration = 31,
    UNDEFINED32 = 32,
    UNDEFINED33 = 33,
    CheckforDodgeRolltoAirslideQuickRun = 34,
    unknownMOTIONstartEgdodgeroll = 35,
} FrameTriggerID;

typedef struct FrameTrigger {
    SetBackColor(cLtGreen);
    short triggerFrame;
    FrameTriggerID frameTriggerID;
    byte paramSize;

    SetBackColor(cLtYellow);
    ushort param[paramSize] <optimize=false>;
};

typedef enum <ubyte> {
    STATEGrounded = 0,
    STATEFalling = 1,
    STATEGrounded2 = 2,
    STATENogravity = 3,
    Enablecollisionflag = 4,
    Disablecollisionflag = 5,
    EnableRECOMflag = 6,
    DisableRECOMflagUNUSED = 7,
    unknownPrintsusingNO_DAMAGE_REACTIONattributeUNUSED = 8,
    STATEunknown = 9,
    Motionattackon = 10,
    STATEAllowscomboattack = 11,
    STATEunknown12 = 12,
    STATEunknown13 = 13,
    STATEAllowsBattleRCs = 14,
    STATEunknownUNUSED = 15,
    unknownMobilityenhancementegLWsdash = 16,
    unknownAIcombo1 = 17,
    unknownAIcombo2 = 18,
    unknownDisableforcediframesegLWsidlegroundandair = 19,
    ReactionCommandSelf = 20,
    STATEunknown21 = 21,
    Turntotarget = 22,
    Textureanimation = 23,
    PROPERTYunknownDisablegravitybutkeepskinetics = 24,
    PROPERTYunknownAnmatrCommandReactioncommandonotherobject = 25,
    PROPERTYunknownAnmatrCommand = 26,
    STATEHitboxoffCantbehit = 27,
    Turntolockon = 28,
    STATEunknownCantfalloffedgeseasily = 29,
    STATEunknownFreezeanimationImmovable = 30,
    STATEunknown31 = 31,
    STATEunknown32 = 32,
    motionattackonEnemy = 33,
    STATEunknownUNUSED34 = 34,
    STATEunknownEgFireMakesfirecountascombo = 35,
    PatternenableLWattacksTeleporttoplayer = 36,
    Patterndisable = 37,
    STATEunknown38 = 38,
    STATEunknownUNUSED39 = 39,
    STATEunknown40 = 40,
    STATEunknown41 = 41,
    STATEunknownEglandingusingitems = 42,
    STATEunknownUNUSED43 = 43,
    STATEunknownEgExplosionfinisherLWbowNotmovablebyotherobjects = 44,
    STATEunknownUNUSED45 = 45,
    STATEunknownUNUSED46 = 46,
    STATEunknown47 = 47,
    STATEunknownUNUSED48 = 48,
    STATEunknownEgDodgeroll = 49,
    STATEunknownAllowscombofinishernext = 50,
    PlaysingletonSE = 51,
    STATEunknown52 = 52,
    STATEunknown53 = 53,
} RangeTriggerID;

typedef struct RangeTrigger {
    SetBackColor(cLtGreen);
    short startFrame;
    short endFrame;
    RangeTriggerID rangeTriggerID;
    byte paramSize;

    SetBackColor(cLtYellow);
    ushort param[paramSize] <optimize=false>;
};

typedef struct MotionTrigger(int length) {
    local int64 top = FTell();

    SetBackColor(cLtGreen);
    byte rangeTriggerCount;
    byte frameTriggerCount;
    ushort frameTriggerOffset;
    SetBackColor(cNone);

    RangeTrigger rangeTrigger[rangeTriggerCount] <optimize=false>;

    FSeek(top + frameTriggerOffset);
    FrameTrigger frameTrigger[frameTriggerCount] <optimize=false>;

};

void ReadMotionTriggers(int length) {
    MotionTrigger motionTrigger(length);
}
